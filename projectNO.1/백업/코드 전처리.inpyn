import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.graph_objects as go

# 데이터 불러오기 경로는 알아서
df = pd.read_csv('./실습데이터.csv')

## df 분석이 용이하게 바꾸기!!!

# 거래id , 사이트 열 삭제
# df.drop('거래id', axis=1, inplace = True)
# df.drop('사이트', axis=1, inplace = True)
#데이터 타입 바꾸기 >> 금액을 모두 int형태로
df['거래금액'] = df['거래금액'].replace('-', '0').astype('int64')
df['판매가격'] = df['판매가격'].replace('-', np.nan)
# df['판매가격'] = df['판매가격'].replace('-', '0').astype('int64')
df['쿠폰할인액'] = df['쿠폰할인액'].replace('-', '0').astype('int64')
df['환불금액'] = df['환불금액'].replace('-', '0').astype('int64')
# df['코스(상품) 이름'] = df['코스(상품) 이름'].astype('string')

# 거래일자 열의 형식을 '%Y. %m. %d. %p %I:%M:%S'로 변환 후 year, month, day 열 추가. 
## 월 별로 차이점을 볼 수 있지 않을까 기대
## 오전 오후를 파이썬에서 어떻게 처리하는 방법을 몰라서 am, pm으로 바꿨음.
df['거래일자'] = df['거래일자'].str.replace('오전', 'AM').str.replace('오후', 'PM')
df['거래일자'] = pd.to_datetime(df['거래일자'], format='%Y. %m. %d. %p %I:%M:%S').dt.strftime('%y. %m. %d. %H:%M:%S')
df['거래일자'] = pd.to_datetime(df['거래일자'], format='%y. %m. %d. %H:%M:%S')


# df['year'] = df['거래일자'].dt.year
df['월'] = df['거래일자'].dt.month
df['일'] = df['거래일자'].dt.day
# df['ampm'] = df['거래일자'].dt.strftime('%p')
# df['hour'] = df['거래일자'].dt.hour
# df['minute'] = df['거래일자'].dt.minute
# df['second'] = df['거래일자'].dt.second



## 쿠폰등을 통해 확인한 b2b 데이터 제거 작업
coupon_df = df.groupby('쿠폰이름')['쿠폰이름'].value_counts().sort_values(ascending=False).to_frame()
coupond_df = coupon_df.reset_index(inplace=True)
coupon_df

checking_coupon_df = coupon_df[coupon_df['쿠폰이름'].str.contains('내부|직원|검수|강사|참고|조교|PD')].reset_index()
del checking_coupon_df['index']

# 직원이 검수하는 등으로 쓴 내부자용 쿠폰이 아닌경우 -
except_list = ['[20%할인쿠폰] 허들러스 유성민 강사 컨설팅 등록자 전용 할인 쿠폰', '아일리스 임직원 전용 50% 쿠폰', '[권오상의 금융 아카데미 5탄] 내부회계관리제도 3만원 할인 쿠폰!', '[권오상의 금융 아카데미 5탄] 내부회계관리제도 3만원 할인 쿠폰!', '[권오상의 금융 아카데미 5탄] 내부회계관리제도 5만원 할인 쿠폰!', '[권오상의 금융 아카데미 5탄] 내부회계관리제도 8만원 할인 쿠폰!',
               '[권오상의 금융 아카데미 5탄] 내부회계관리제도 10만원 할인 쿠폰!', '[30% 할인 수강권] 강사님 지인 제공용', '[20% 할인쿠폰] 김은호 강사님 채널 전용 20% 할인 쿠폰', '[20%할인쿠폰] 허들러스 유성민 강사 컨설팅 등록자 전용 할인 쿠폰', '[20% 할인쿠폰] The RED : 강사룡의 앱 안정성 및 확장성 강화를 위한 Android 아키텍처 할인쿠폰',
               '[20% 할인쿠폰] Kubernetes 자격증 마스터 클래스 : CKA/CKAD/CKS 강사님 할인 쿠폰', '[30% 할인쿠폰] 강사님 지인 할인 쿠폰_Kotlin&Spring', '사이드프로젝트 (오아리 강사님) 50% 할인쿠폰', '[20% 할인쿠폰] The RED : 강사룡의 앱 안정성 및 확장성 강화를 위한 Android 아키텍처', '[할인쿠폰] 강사님 지인 20% 할인 쿠폰',
               '[30% 할인쿠폰] 김정식 강사님 채널 전용 30% 할인 쿠폰', '[50% 수강 할인권] 강사님 제공용', '[50% 할인 수강권] 강사님 지인 제공용', '신해동 강사 쿠폰 제공_2209', '신해동 강사 쿠폰 제공', '신해동 강사 쿠폰 제공_2211', '초격차 패키지 : 퍼포먼스 마케팅, 데이터로 완전정복_강사 제공 쿠폰', '[무료수강권] 허들러스 유성민 강사 컨설팅 등록자 증정 쿠폰', '[50% 할인 쿠폰] 강의 참고용 발행_조교님']
#  - 제외 시킨다
for i in except_list:
    cheking_coupon_df = checking_coupon_df.drop(checking_coupon_df[checking_coupon_df['쿠폰이름'] == i].index, inplace=True)


checking_coupon_df.reset_index(inplace=True)
#왜인지 모르겠지만 지워지지않은 '아일리스 임직원 전용 50% 쿠폰'을 내부,검수용 리스트에서 직접 삭제
checking_coupon_df.drop(38,inplace=True)
checking_coupon_df

name_list = checking_coupon_df['쿠폰이름'].tolist()

## 위에서 정의한 '내부, 검수용'으로 판명되는 row를 삭제
for i in name_list:
    df.drop(df[df['쿠폰이름'] == i].index, inplace=True)

# 무료 강의 지우는 코드
df = df.drop(df[df['코스(상품) 이름'].str.contains('무료')].index)
df = df.drop(df[df['코스(상품) 이름'] == 'test_qa'].index)
## 크리에이티브 카테고리: 1 >> 더미 데이터, 삭제 필요
df = df.drop(df[df['카테고리'] == '크리에이티브'].index)



PAY_df = df[df['유형'] == 'PAYMENT']
PAY_df

PAY_df[PAY_df['판매가격'] =='-']


# 기존 판매가격 값이 NaN인 경우에만 새로운 값으로 대체: 거래금액 + 쿠폰할인액
df['판매가격'] = df['판매가격'].fillna(df.apply(lambda x: x['쿠폰할인액'] + x['거래금액'] if pd.isna(x['판매가격']) else x['판매가격'], axis=1))
df['판매가격'] = df['판매가격'].astype('int')
# df.info()


# 실거래금액이 판매가격보다 큰 경우 b2b로 판정
b2b_df = df[df['실거래금액'] > df['판매가격']]
b2b_df.to_csv('제목 바꾸기.csv')


# 거래일자(거래시간이 초단위까지 같음)가 2개이상인 데이터의 경우 단체구매로 판정, b2b로 분류

hmm_df = PAY_df.groupby('거래일자')['코스(상품) 이름'].value_counts().to_frame().reset_index()

hmm_re_df = hmm_df[hmm_df['count'] >= 2]
hmm_re_df.reset_index()

# PAY_df와 hmm_re_df에 일치하는 데이터만 남기는 코드 , 원래 hmm_re_df에는 컬럼이 별로 없어서 병합해서 컬럼을 추가해야함
merged_df = pd.merge(PAY_df, hmm_re_df[['거래일자', '코스(상품) 이름']], on=['거래일자', '코스(상품) 이름'])

merged_df['판매가격'] = merged_df['판매가격'].replace('-', np.nan)
# 기존 판매가격 값이 NaN인 경우에만 새로운 값으로 대체: 거래금액 + 쿠폰할인액을 판매가격으로
merged_df['판매가격'] = merged_df['판매가격'].fillna(merged_df.apply(lambda x: x['쿠폰할인액'] + x['거래금액'] if pd.isna(x['판매가격']) else x['판매가격'], axis=1))
merged_df['판매가격'] = merged_df['판매가격'].astype('int')

merged_df.info()

## merge b2b로 판정된(거래시간이 초단위로 같은것  & 실거래금액이 판매가격보다 큰 것)행을  df로 병합
re_merged_df = pd.merge(merged_df, b2b_df, how='outer', on=list(merged_df.columns), suffixes=('_merged_df', '_b2b_df'))
# len(re_merged_df)
# re_merged_df.to_csv('b2b데이터 maybe 최종본 : 1489개.csv')


#PAYMENT REFUND를 모두 포함한 데이터를 df로 저장
b2b_list = re_merged_df['거래id'].tolist()
for i in b2b_list:
    df = df.drop(df[df['거래id'] == i].index)
# df.to_csv('b2c : REFUND 포함 전체 데이터.csv')

#REFUND를 제외하고 PAYMENT만을 PAY_df로 저장
b2b_list = re_merged_df['거래id'].tolist()
for i in b2b_list:
    PAY_df = PAY_df.drop(PAY_df[PAY_df['거래id'] == i].index)
# PAY_df.to_csv('only PAYMENT b2c data.csv')



